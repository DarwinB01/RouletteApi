package com.roulette.api.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.roulette.api.dto.BetDTO;
import com.roulette.api.dto.OutputDTO;
import com.roulette.api.dto.WinnerDTO;
import com.roulette.api.model.Roulette;
import com.roulette.api.repository.RepositoryMain;
import com.roulette.api.util.Constants;
import com.fasterxml.jackson.core.type.TypeReference;

/**
 * Roulette class for services
 * 
 * @author Darwin Bonilla
 *
 */
@Service
public class ServiceRoulette {

	@Autowired
	private RepositoryMain repositoryMain;
	@Autowired
	ObjectMapper objectMapper;

	public Long createRoulette() {
		Roulette roulette = new Roulette("closed");
		Roulette outputRoulette = repositoryMain.save(roulette);

		return outputRoulette.getIdRoulette();
	}

	public OutputDTO openRoulette(Long id) {
		OutputDTO outputDTO = new OutputDTO();
		Optional<Roulette> roulette = repositoryMain.findById(id);
		if (roulette.isPresent()) {
			Roulette request = roulette.get();
			if (request.getStatus().equals("closed")) {
				request.setBetList(null);
			}
			request.setStatus("open");
			repositoryMain.save(request);
			outputDTO.setOutputMessage("Operación exitosa");
			outputDTO.setStatusCode(Constants.STATUS_OK);
		} else {
			outputDTO.setOutputMessage("Operación denegada");
			outputDTO.setStatusCode(Constants.BAD_REQUEST);
		}

		return outputDTO;
	}

	public OutputDTO closeRoulette(Long id) {

		Optional<Roulette> optionalRoulette = repositoryMain.findById(id);

		OutputDTO output = new OutputDTO();

		if (optionalRoulette.isPresent()) {
			Roulette roulette = optionalRoulette.get();
			roulette.setStatus(Constants.CLOSED);
			repositoryMain.save(roulette);
			List<BetDTO> betsConnected = objectMapper.convertValue(roulette.getBetList(),
					new TypeReference<List<BetDTO>>() {
					});
			output = chooseWinner(betsConnected);
			output.setStatusCode(Constants.STATUS_OK);
			output.setOutputMessage("Ruleta cerrada");
			output.setBetsConnected(betsConnected);
		} else {
			output.setStatusCode(404);
			output.setOutputMessage("Ruleta no disponible");
		}

		return output;
	}
	private OutputDTO chooseWinner(List<BetDTO> betsDTO) {
		Long randomNumber = (long) (Math.random() * 36);
		OutputDTO response = new OutputDTO();
		response.setWinnerNumber(randomNumber);
		WinnerDTO winnerDTO = null;
		for (BetDTO betDTO : betsDTO) {
			boolean isNumberSelected = isNumberSelected(betDTO);
			if(isNumberSelected && isWinnerNumber(betDTO, randomNumber)) {
				winnerDTO = new WinnerDTO(betDTO.getIdUser(), betDTO.getMoney() * 5);
			}else if(isColorSelected(betDTO) && isWinnerColor(betDTO, randomNumber)) {
				
			}
		}
		WinnerDTO winnerDTO = null;
		for (int i = 0; i < betsDTO.size(); i++) {
			if (betsDTO.get(i).getNumberSelected() != null && betsDTO.get(i).getNumberSelected() == randomNumber) {
				winnerDTO = new WinnerDTO(betsDTO.get(i).getUserId(), betsDTO.get(i).getBetAmount() * 5);
				response.addWinner(winnerDTO);
			}
			if (betsDTO.get(i).getColorSelected() != null) {
				if (randomNumber % 2 == 0 && betsDTO.get(i).getColorSelected().equalsIgnoreCase("rojo")) {
					response.setWinnerColor("rojo");
					winnerDTO = new WinnerDTO(betsDTO.get(i).getUserId(), betsDTO.get(i).getBetAmount() * 1.8);
					response.addWinner(winnerDTO);
				} else if (randomNumber % 2 != 0 && betsDTO.get(i).getColorSelected().equalsIgnoreCase("negro")) {
					response.setWinnerColor("negro");
					winnerDTO = new WinnerDTO(betsDTO.get(i).getUserId(), betsDTO.get(i).getBetAmount() * 1.8);
					response.addWinner(winnerDTO);
				}
			}
		}
		
		return response;
	}
	private boolean isWinnerNumber(BetDTO bet, Long randomNumber) {
		return bet.getNumber() == randomNumber ? true : false;
	}
	private boolean isNumberSelected(BetDTO betDTO) {
		return betDTO.getNumber() != null ? true : false;
	}
	private boolean isWinnerColor(BetDTO betDTO, Long randomNumber) {
		boolean isWinnerColor = false;
		if(betDTO.getColor().equalsIgnoreCase("negro") && randomNumber % 2 != 0) {
			isWinnerColor = true;
		} else if(betDTO.getColor().equalsIgnoreCase("rojo") && randomNumber % 2 == 0) {
			 isWinnerColor = true;
		} 
		return isWinnerColor;
	}
	private boolean isColorSelected(BetDTO betDTO) {
		return betDTO.getColor() != null ? true : false;
	}
	

}
